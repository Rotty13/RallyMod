#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
HINSTANCE mHinst = 0, mHinstDLL = 0;
extern "C" UINT_PTR mProcs[6] = {0};

extern "C" void RallyCode();
extern "C" void* injectPoint = (void*)0x1409B93F7;
extern "C" void* codeCavePoint = (void*)0x13FFE0000;
extern "C" void* BaseB = (void*)0x144768E78;
extern "C" void* HealthBar = (void*)0x144783628;
#pragma warning(disable: 4838)
extern "C" byte origBytes[] = { 0xE8, 0xB4, 0x00, 0x02, 0x00, 0x90}; //call 1409D94B0
extern "C" byte jmpBytes[] = { 0xE9, 0x04, 0x6C, 0x62, 0xFF, 0x90 }; //call 1409D94B0
extern "C" byte rallyCodeBytes[] = { 0x50, 0x51, 0x52, 0x56, 0x57, 0x41, 0x52, 0x83, 0xEC, 0x16, 0xF3, 0x0F, 0x11, 0x04, 0x24, 0xF3, 0x0F, 0x11, 0x4C, 0x24, 0x04, 0x48, 0xA1, 0x28, 0x36, 0x78, 0x44, 0x01, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x40, 0x08, 0x48, 0x8B, 0x80, 0xE8, 0x14, 0x00, 0x00, 0x48, 0x8B, 0x00, 0x48, 0x8B, 0x48, 0x10, 0x48, 0x81, 0xC1, 0xC8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0D, 0x87, 0x00, 0x00, 0x00, 0xA1, 0xDA, 0x00, 0xFE, 0x3F, 0x01, 0x00, 0x00, 0x00, 0x89, 0x81, 0xBC, 0x00, 0x00, 0x00, 0x48, 0xA1, 0x78, 0x8E, 0x76, 0x44, 0x01, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x80, 0x80, 0x00, 0x00, 0x00, 0x48, 0x89, 0x3D, 0x68, 0x00, 0x00, 0x00, 0x48, 0x39, 0xC7, 0x0F, 0x85, 0x38, 0x00, 0x00, 0x00, 0x48, 0x8B, 0xBF, 0x90, 0x1F, 0x00, 0x00, 0x48, 0x8B, 0x7F, 0x18, 0x8B, 0x87, 0xD8, 0x00, 0x00, 0x00, 0xF3, 0x0F, 0x2A, 0xC2, 0xF3, 0x0F, 0x10, 0x0D, 0x4A, 0x00, 0x00, 0x00, 0xF3, 0x0F, 0x59, 0xC1, 0xF3, 0x0F, 0x2C, 0xD0, 0x29, 0xD0, 0x8B, 0x91, 0xD0, 0x00, 0x00, 0x00, 0x39, 0xD0, 0x0F, 0x4F, 0xC2, 0x89, 0x87, 0xD8, 0x00, 0x00, 0x00, 0xF3, 0x0F, 0x10, 0x4C, 0x24, 0x04, 0xF3, 0x0F, 0x10, 0x04, 0x24, 0x83, 0xC4, 0x16, 0x41, 0x5A, 0x5F, 0x5E, 0x5A, 0x59, 0x58, 0xE8, 0xEF, 0x93, 0x9F, 0x00, 0xE9, 0x36, 0x93, 0x9D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
extern "C" float* HealthStealModifier = (float*)((byte*)&rallyCodeBytes+0xD6);
extern "C" float* RallyTime = (float*)((byte*)&rallyCodeBytes + 0xDA);


void LoadOriginalDll();
void InitSettings();
DWORD WINAPI InjectTimer(void* arg);

LPCSTR mImportNames[] = {"DirectInput8Create", "DllCanUnloadNow", "DllGetClassObject", "DllRegisterServer", "DllUnregisterServer", "GetdfDIJoystick"};
BOOL WINAPI DllMain( HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved ) {
	mHinst = hinstDLL;
	if ( fdwReason == DLL_PROCESS_ATTACH ) {
		InitSettings();
		LoadOriginalDll();
		for ( int i = 0; i < 6; i++ )
			mProcs[ i ] = (UINT_PTR)GetProcAddress( mHinstDLL, mImportNames[ i ] );

		DWORD dwback;
		LPVOID lpvResult;
		lpvResult = VirtualAlloc(
			(LPVOID)codeCavePoint, // Next page to commit
			1024,         // Page size, in bytes
			MEM_COMMIT | MEM_RESERVE,         // Allocate a committed page
			PAGE_EXECUTE_READWRITE);
		VirtualProtect(codeCavePoint, sizeof(rallyCodeBytes), PAGE_EXECUTE_READWRITE, &dwback);

		memcpy(codeCavePoint, &rallyCodeBytes, sizeof(rallyCodeBytes));

		//VirtualProtect(codeCavePoint, sizeof(rallyCodeBytes), dwback, 0);

		CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)InjectTimer, 0, 0, 0);
	} else if ( fdwReason == DLL_PROCESS_DETACH ) {
		FreeLibrary( mHinstDLL );
	}
	return ( TRUE );
}

extern "C" void DirectInput8Create_wrapper();
extern "C" void DllCanUnloadNow_wrapper();
extern "C" void DllGetClassObject_wrapper();
extern "C" void DllRegisterServer_wrapper();
extern "C" void DllUnregisterServer_wrapper();
extern "C" void GetdfDIJoystick_wrapper();


// Loads the original DLL from the default system directory
//	Function originally written by Michael Koch
void LoadOriginalDll()
{
	char buffer[MAX_PATH];

	// Get path to system dir and to dinput8.dll
	GetSystemDirectory(buffer, MAX_PATH);

	// Append DLL name
	strcat_s(buffer, "\\dinput8.dll");

	// Try to load the system's dinput8.dll, if pointer empty
	if (!mHinstDLL) mHinstDLL = LoadLibrary(buffer);

	// Debug
	if (!mHinstDLL)
	{
		OutputDebugString("PROXYDLL: Original dinput8.dll not loaded ERROR ****\r\n");
		ExitProcess(0); // Exit the hard way
	}

}

void InitSettings() {
	char buffer[128]="80.0";
	GetPrivateProfileString("gameplay", "rallyTime", "8.0", buffer, 128, ".\\rallymod.ini");
	*RallyTime = (float)atof(buffer);
	GetPrivateProfileString("gameplay", "healthStealModifier", ".75", buffer, 128, ".\\rallymod.ini");
	*HealthStealModifier = (float)atof(buffer);

	GetPrivateProfileString("misc", "chainDInput8DLLPath", "", buffer, 128, ".\\rallymod.ini");
	if (strcmp(buffer, "") != 0) {
		LoadLibrary(buffer);
	}

}

VOID* DetourCreate(BYTE* src, CONST BYTE* dst, CONST INT len)
{
	DWORD dwback;
	BYTE* jmp = (BYTE*)malloc(len + 5);
	VirtualProtect(src, len, PAGE_READWRITE, &dwback);
	memcpy(jmp, src, len);
	jmp += len;
	jmp[0] = 0xE9;
	*(DWORD*)(jmp + 1) = (DWORD)(src + len - jmp) - 5;
	memset(src, 0x90, len);
	src[0] = 0xE9;
	*(DWORD*)(src + 1) = (DWORD)(dst - src) - 5;
	VirtualProtect(src, len, dwback, 0);

	return (jmp - len);
}

VOID* DetourFarCreate(BYTE* src, CONST BYTE* dst, CONST INT len)
{


	return 0;
}

DWORD WINAPI InjectTimer(void* arg){
	while (true) {
		Sleep(1000);
		if (memcmp(injectPoint, &origBytes, sizeof(origBytes)) == 0) {
			DWORD dwback;
			//VirtualProtect(injectPoint, sizeof(jmpBytes), PAGE_READWRITE, &dwback);
			memcpy(injectPoint, &jmpBytes, sizeof(jmpBytes));
			//VirtualProtect(injectPoint, sizeof(jmpBytes), dwback, 0);
		}
		
	}
	return 0;
}
